// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dht.proto

/*
Package dht_pb is a generated protocol buffer package.

It is generated from these files:
	dht.proto

It has these top-level messages:
	Message
*/
package dht_pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import record_pb "github.com/libp2p/go-libp2p-record/pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message_MessageType int32

const (
	Message_PUT_VALUE     Message_MessageType = 0
	Message_GET_VALUE     Message_MessageType = 1
	Message_ADD_PROVIDER  Message_MessageType = 2
	Message_GET_PROVIDERS Message_MessageType = 3
	Message_FIND_NODE     Message_MessageType = 4
	Message_PING          Message_MessageType = 5
)

var Message_MessageType_name = map[int32]string{
	0: "PUT_VALUE",
	1: "GET_VALUE",
	2: "ADD_PROVIDER",
	3: "GET_PROVIDERS",
	4: "FIND_NODE",
	5: "PING",
}
var Message_MessageType_value = map[string]int32{
	"PUT_VALUE":     0,
	"GET_VALUE":     1,
	"ADD_PROVIDER":  2,
	"GET_PROVIDERS": 3,
	"FIND_NODE":     4,
	"PING":          5,
}

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}
func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (x *Message_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Message_MessageType_value, data, "Message_MessageType")
	if err != nil {
		return err
	}
	*x = Message_MessageType(value)
	return nil
}
func (Message_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDht, []int{0, 0} }

type Message_ConnectionType int32

const (
	// sender does not have a connection to peer, and no extra information (default)
	Message_NOT_CONNECTED Message_ConnectionType = 0
	// sender has a live connection to peer
	Message_CONNECTED Message_ConnectionType = 1
	// sender recently connected to peer
	Message_CAN_CONNECT Message_ConnectionType = 2
	// sender recently tried to connect to peer repeatedly but failed to connect
	// ("try" here is loose, but this should signal "made strong effort, failed")
	Message_CANNOT_CONNECT Message_ConnectionType = 3
)

var Message_ConnectionType_name = map[int32]string{
	0: "NOT_CONNECTED",
	1: "CONNECTED",
	2: "CAN_CONNECT",
	3: "CANNOT_CONNECT",
}
var Message_ConnectionType_value = map[string]int32{
	"NOT_CONNECTED":  0,
	"CONNECTED":      1,
	"CAN_CONNECT":    2,
	"CANNOT_CONNECT": 3,
}

func (x Message_ConnectionType) Enum() *Message_ConnectionType {
	p := new(Message_ConnectionType)
	*p = x
	return p
}
func (x Message_ConnectionType) String() string {
	return proto.EnumName(Message_ConnectionType_name, int32(x))
}
func (x *Message_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Message_ConnectionType_value, data, "Message_ConnectionType")
	if err != nil {
		return err
	}
	*x = Message_ConnectionType(value)
	return nil
}
func (Message_ConnectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDht, []int{0, 1} }

type Message struct {
	// defines what type of message it is.
	Type *Message_MessageType `protobuf:"varint,1,opt,name=type,enum=dht.pb.Message_MessageType" json:"type,omitempty"`
	// defines what coral cluster level this query/response belongs to.
	// in case we want to implement coral's cluster rings in the future.
	ClusterLevelRaw *int32 `protobuf:"varint,10,opt,name=clusterLevelRaw" json:"clusterLevelRaw,omitempty"`
	// Used to specify the key associated with this message.
	// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	Key []byte `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Used to return a value
	// PUT_VALUE, GET_VALUE
	Record *record_pb.Record `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
	// Used to return peers closer to a key in a query
	// GET_VALUE, GET_PROVIDERS, FIND_NODE
	CloserPeers []*Message_Peer `protobuf:"bytes,8,rep,name=closerPeers" json:"closerPeers,omitempty"`
	// Used to return Providers
	// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	ProviderPeers    []*Message_Peer `protobuf:"bytes,9,rep,name=providerPeers" json:"providerPeers,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorDht, []int{0} }

func (m *Message) GetType() Message_MessageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Message_PUT_VALUE
}

func (m *Message) GetClusterLevelRaw() int32 {
	if m != nil && m.ClusterLevelRaw != nil {
		return *m.ClusterLevelRaw
	}
	return 0
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetRecord() *record_pb.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Message) GetCloserPeers() []*Message_Peer {
	if m != nil {
		return m.CloserPeers
	}
	return nil
}

func (m *Message) GetProviderPeers() []*Message_Peer {
	if m != nil {
		return m.ProviderPeers
	}
	return nil
}

type Message_Peer struct {
	// ID of a given peer.
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// multiaddrs for a given peer
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	// used to signal the sender's connection capabilities to the peer
	Connection       *Message_ConnectionType `protobuf:"varint,3,opt,name=connection,enum=dht.pb.Message_ConnectionType" json:"connection,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *Message_Peer) Reset()                    { *m = Message_Peer{} }
func (m *Message_Peer) String() string            { return proto.CompactTextString(m) }
func (*Message_Peer) ProtoMessage()               {}
func (*Message_Peer) Descriptor() ([]byte, []int) { return fileDescriptorDht, []int{0, 0} }

func (m *Message_Peer) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Message_Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Message_Peer) GetConnection() Message_ConnectionType {
	if m != nil && m.Connection != nil {
		return *m.Connection
	}
	return Message_NOT_CONNECTED
}

func init() {
	proto.RegisterType((*Message)(nil), "dht.pb.Message")
	proto.RegisterType((*Message_Peer)(nil), "dht.pb.Message.Peer")
	proto.RegisterEnum("dht.pb.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
	proto.RegisterEnum("dht.pb.Message_ConnectionType", Message_ConnectionType_name, Message_ConnectionType_value)
}

func init() { proto.RegisterFile("dht.proto", fileDescriptorDht) }

var fileDescriptorDht = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x6f, 0x9b, 0x40,
	0x10, 0xc5, 0xcb, 0x1f, 0xa7, 0xf1, 0x60, 0x93, 0xcd, 0x28, 0x07, 0x94, 0x4a, 0x15, 0xf2, 0x89,
	0x1e, 0x02, 0x12, 0x87, 0x1e, 0x7a, 0xa8, 0x64, 0x01, 0x8d, 0x2c, 0xa5, 0x6b, 0xb4, 0x25, 0xe9,
	0x11, 0x19, 0x58, 0x39, 0xa8, 0xd4, 0x8b, 0x16, 0x92, 0xca, 0x9f, 0xb0, 0x5f, 0xab, 0x02, 0x42,
	0x4b, 0x7c, 0xe8, 0x89, 0xf7, 0x76, 0xdf, 0x8f, 0x79, 0x3b, 0x30, 0x2f, 0x1e, 0x5b, 0xb7, 0x96,
	0xa2, 0x15, 0x78, 0xd6, 0xcb, 0xec, 0xda, 0xdf, 0x97, 0xed, 0xe3, 0x53, 0xe6, 0xe6, 0xe2, 0xa7,
	0x57, 0x95, 0x59, 0xed, 0xd7, 0xde, 0x5e, 0xdc, 0x0c, 0xea, 0x46, 0xf2, 0x5c, 0xc8, 0xc2, 0xab,
	0x33, 0x6f, 0x50, 0x03, 0xbb, 0xfa, 0xad, 0xc3, 0xdb, 0xaf, 0xbc, 0x69, 0x76, 0x7b, 0x8e, 0x1e,
	0xe8, 0xed, 0xb1, 0xe6, 0x96, 0x62, 0x2b, 0x8e, 0xe9, 0xbf, 0x73, 0x87, 0xdf, 0xba, 0x2f, 0xd7,
	0xe3, 0x37, 0x39, 0xd6, 0x9c, 0xf5, 0x41, 0x74, 0xe0, 0x22, 0xaf, 0x9e, 0x9a, 0x96, 0xcb, 0x3b,
	0xfe, 0xcc, 0x2b, 0xb6, 0xfb, 0x65, 0x81, 0xad, 0x38, 0x33, 0x76, 0x7a, 0x8c, 0x04, 0xb4, 0x1f,
	0xfc, 0x68, 0xa9, 0xb6, 0xe2, 0x2c, 0x58, 0x27, 0xf1, 0x03, 0x9c, 0x0d, 0x45, 0x2c, 0xcd, 0x56,
	0x1c, 0xc3, 0xbf, 0x74, 0xc7, 0x5e, 0x99, 0xcb, 0x7a, 0xc5, 0x5e, 0x02, 0xf8, 0x11, 0x8c, 0xbc,
	0x12, 0x0d, 0x97, 0x31, 0xe7, 0xb2, 0xb1, 0xce, 0x6d, 0xcd, 0x31, 0xfc, 0xab, 0xd3, 0x7a, 0xdd,
	0x25, 0x9b, 0x06, 0xf1, 0x13, 0x2c, 0x6b, 0x29, 0x9e, 0xcb, 0x62, 0x24, 0xe7, 0xff, 0x21, 0x5f,
	0x47, 0xaf, 0x2b, 0xd0, 0x3b, 0x81, 0x26, 0xa8, 0x65, 0xd1, 0x6f, 0x64, 0xc1, 0xd4, 0xb2, 0xc0,
	0x2b, 0x98, 0xed, 0x8a, 0x42, 0x36, 0x96, 0x6a, 0x6b, 0xce, 0x82, 0x0d, 0x06, 0x3f, 0x03, 0xe4,
	0xe2, 0x70, 0xe0, 0x79, 0x5b, 0x8a, 0x43, 0xff, 0x20, 0xd3, 0x7f, 0x7f, 0x3a, 0x26, 0xf8, 0x9b,
	0xe8, 0x57, 0x38, 0x21, 0x56, 0x25, 0x18, 0x93, 0xed, 0xe2, 0x12, 0xe6, 0xf1, 0x7d, 0x92, 0x3e,
	0xac, 0xef, 0xee, 0x23, 0xf2, 0xa6, 0xb3, 0xb7, 0xd1, 0x68, 0x15, 0x24, 0xb0, 0x58, 0x87, 0x61,
	0x1a, 0xb3, 0xed, 0xc3, 0x26, 0x8c, 0x18, 0x51, 0xf1, 0x12, 0x96, 0x5d, 0x60, 0x3c, 0xf9, 0x46,
	0xb4, 0x8e, 0xf9, 0xb2, 0xa1, 0x61, 0x4a, 0xb7, 0x61, 0x44, 0x74, 0x3c, 0x07, 0x3d, 0xde, 0xd0,
	0x5b, 0x32, 0x5b, 0x7d, 0x07, 0xf3, 0x75, 0x91, 0x8e, 0xa6, 0xdb, 0x24, 0x0d, 0xb6, 0x94, 0x46,
	0x41, 0x12, 0x85, 0xc3, 0xc4, 0x7f, 0x56, 0xc1, 0x0b, 0x30, 0x82, 0x35, 0x1d, 0x13, 0x44, 0x45,
	0x04, 0x33, 0x58, 0xd3, 0x09, 0x45, 0xb4, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x35, 0x43, 0x8b,
	0x0f, 0x91, 0x02, 0x00, 0x00,
}
